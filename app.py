import streamlit as st
import numpy as np
import joblib
from tensorflow.keras.models import load_model

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost ‡πÅ‡∏•‡∏∞ Embedding
main_model = joblib.load("xgboost_model.pkl")
embedding_model = load_model("embedding_model.keras")

# ‡πÇ‡∏´‡∏•‡∏î encoders
le_location = joblib.load("le_location.pkl")
le_station = joblib.load("le_station.pkl")
le_developer = joblib.load("le_developer.pkl")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö
def distance_map_from_number(distance_m):
    try:
        distance_m = float(distance_m)
    except:
        return 1  # ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ú‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà 1

    if distance_m <= 400:
        return 3
    elif distance_m <= 1000:
        return 2
    else:
        return 1

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1-5
def map_floor_level(floor, total_floors):
    ratio = floor / total_floors
    if ratio <= 1 / 5:
        return 1
    elif ratio <= 2 / 5:
        return 2
    elif ratio <= 3 / 5:
        return 3
    elif ratio <= 4 / 5:
        return 4
    else:
        return 5

# ‡∏™‡πà‡∏ß‡∏ô UI ‡∏î‡πâ‡∏ß‡∏¢ Streamlit
st.title("üèôÔ∏è ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø")

with st.form("input_form"):
    location = st.text_input("üìç Location")
    bedroom = st.number_input("üõèÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", min_value=0, step=1)
    bathroom = st.number_input("üõÅ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", min_value=0, step=1)
    area_sqm = st.number_input("üìê ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á (‡∏ï‡∏£.‡∏°.)", min_value=1.0)
    distance_m = st.text_input("üö∂‚Äç‚ôÄÔ∏è ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ (‡πÄ‡∏°‡∏ï‡∏£) (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)")
    station = st.text_input("üöÜ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤")
    developer = st.text_input("üèóÔ∏è Developer")
    floor = st.number_input("üè¢ ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", min_value=1, step=1)
    total_floors = st.number_input("üè¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏∂‡∏Å", min_value=1, step=1)
    facility = st.number_input("üõéÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å", min_value=0, step=1)
    
    submitted = st.form_submit_button("‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤")

if submitted:
    try:
        # Encode Categorical Features
        location_id = le_location.transform([location])[0]
        station_id = le_station.transform([station])[0]
        developer_id = le_developer.transform([developer])[0]

        # Get Embeddings
        location_emb = embedding_model.get_layer("embedding_3")(np.array([[location_id]])).numpy().reshape(-1)
        station_emb = embedding_model.get_layer("embedding_4")(np.array([[station_id]])).numpy().reshape(-1)
        developer_emb = embedding_model.get_layer("embedding_5")(np.array([[developer_id]])).numpy().reshape(-1)

        # Transform floor and distance
        level_floor = map_floor_level(floor, total_floors)
        distance_level = distance_map_from_number(distance_m)

        numerical_features = np.array([
            bedroom,
            bathroom,
            area_sqm,
            distance_level,
            level_floor,
            facility
        ])

        final_input = np.concatenate([location_emb, station_emb, developer_emb, numerical_features])
        predicted_price = main_model.predict([final_input])

        st.success(f"üìä ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: **{predicted_price[0]:,.2f} ‡∏ö‡∏≤‡∏ó**")

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
